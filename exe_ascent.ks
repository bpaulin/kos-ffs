////////////////////////////////////////////////////////////////////////////////
// ascent
//
// Raise apoapsis, staging til maxStage
////////////////////////////////////////////////////////////////////////////////
declare parameter wantedApoapsisKm. // wanted apoapsis, in km
declare parameter maxStage. // max stage

set wantedApoapsis to wantedApoapsisKm*1000.

run once lib_utils.

global launch_gt0 is 0.
global launch_gt1 is 55000.

////////////////////////////////////////////////////////////////////////////////
// Auto-throttle logic
////////////////////////////////////////////////////////////////////////////////
function ascentThrottle {
  return 1. // yes, kerbal way
}

////////////////////////////////////////////////////////////////////////////////
// Auto steering logic
////////////////////////////////////////////////////////////////////////////////
// function ascentSteering {
//   set gtPct to (altitude - launch_gt0) / (launch_gt1 - launch_gt0).
//   if gtPct<0 {
//     return heading(90,90).
//   } else if gtPct>1 {
//     return heading(90,10).
//   }
//   set pda to (cos(gtPct * 180) + 1) / 2.
//   set theta to max(-80, 90 * ( pda - 1 )).
//   return heading(90, theta+90).
// }

////////////////////////////////////////////////////////////////////////////////
// Vertical ascent
////////////////////////////////////////////////////////////////////////////////
sas on.
lock steering to heading(90,90).
wait until verticalspeed>=80.
local beginTurnA is altitude.

////////////////////////////////////////////////////////////////////////////////
// Ascent loop
////////////////////////////////////////////////////////////////////////////////
sas off.
lock pitch to sqrt((90^2)*(altitude-beginTurnA)/70000).
lock steering to heading(90,90-pitch).

lock throttle to ascentThrottle().
until apoapsis>wantedApoapsis{
  burnStaging(maxStage).
  wait 0.2.
}
detailMessage("Ascent", "apoapsis ok, release throttle").
lock steering to heading(90,0).
lock throttle to 0.

////////////////////////////////////////////////////////////////////////////////
// Waiting for out of atm, if any
////////////////////////////////////////////////////////////////////////////////
if apoapsis>body:atm:height {
  wait until altitude>body:atm:height.
  detailMessage("Ascent", "out of atm").
}
sas on.
